package SWE_Login_AddStaff_Module;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTable;

/**
 *
 * @author Christian Bryce Goodman
 */
public class staffCourseController 
{
    private String host = "localhost";
    private String database = "eattendance";
    private String user = "cgoodman";
    private String pass = "swe2015";
    public String username;
    
    private String operatingCourse;
           
    private ArrayList<Staff> staffList; //Will hold a list of all Staff Members
    private ArrayList<Course> courseList;
    private ArrayList<Student> studentList;
    private add_staff_GUI staffGUI;
    private AdminStaffFormGUI staffFormGUI;
    boolean staffExist;
    
    // -- Load on the WebCam and GUI -- 
    public void loadScanGUI(String courseCode, String courseSeq, ArrayList<Student> s)
    {
        scanGUI sg = new scanGUI(courseCode,courseSeq, s);
    }
    
    // -- Load On the Staff View of Courses --
    public void loadStaffCourseGUI() throws SQLException
    {
        staffHomePanels shp = new staffHomePanels(username);
    }
    
    // -- Ran upon reading an ID from Scan GUI --
    public void studentScanIn(String scannedID, String courseCode, String courseSeq, int hour, int min) throws SQLException
    {
        String courseCodeUg = "0";
        String arriveTime = "";
        String departTime = "0";
        
        // -- Unique key for attendance -- Generated by the date --
        int attenSeq = 0;
        long tempDate = new Date().getTime(); // long must be used since date cannot be stored in an int.
        attenSeq = (int) (tempDate / 1000);   // Converted to 10 digit int by dividing by 1000
        
        // -- Get times of the ID Scan and set arrive time --
        Date dt = new java.util.Date();

        SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        arriveTime = sdf.format(dt);
        departTime = sdf.format(dt);
        
        // Determines if late, abenst, on time, etc...
        // 0 = absent
        // 1 = on time, present
        // 2 = Late by 10 minutes or less 
        // 3 = Very late
        String status;
        int    statusInt = 0;
        status = checkStatus(courseSeq, Integer.toString(hour), Integer.toString(min));
        
        if (status.equals("On Time"))
            statusInt = 1;
        if(status.equals("Late"))
            statusInt = 2;
        if(status.equals("Very Late"))
            statusInt = 3;
        
        // -- Make the connection --
        Connection conn = null;
        ResultSet rs = null;
        Statement st = null;
        
        conn = DriverManager.getConnection("jdbc:mysql://" + host
                                + "/" + database + "?"
                                + "user=" + user
                                + "&password=" + pass);   
        
        //-- Insert the attendance to the DB --
        st = conn.createStatement();
            st.executeUpdate("INSERT into attendance_recorded " + "VALUES('" 
                + scannedID       + "','" 
                + courseCode      + "','" 
                + courseCodeUg  + "','"
                + arriveTime     + "','" 
                + departTime  + "','"
                + attenSeq  + "','"
                + statusInt  + "')");
        
        conn.close();
    }
    
    //-- Gets A list of All students in the DB --
    public ArrayList getStudentList() throws SQLException 
    {
        studentList = new ArrayList<Student>();        
        Connection conn = null;
        ResultSet rs = null;
        Statement st = null;

        conn = DriverManager.getConnection("jdbc:mysql://" + host
                                + "/" + database + "?"
                                + "user=" + user
                                + "&password=" + pass);
            
        st = conn.createStatement(rs.TYPE_SCROLL_SENSITIVE,rs.CONCUR_UPDATABLE);
                   
        String query = "Select * from STUDENT";
        String f_name, l_name, id, email, url;
        rs = st.executeQuery(query);                  
       
        rs.beforeFirst();
        while(rs.next())
        {
            f_name      = rs.getString("first_name");
            l_name      = rs.getString("last_name");   
            id          = rs.getString("student_id");
            email       = rs.getString("email");
            url         = rs.getString("image_url");
            studentList.add(new Student(f_name, l_name, id ,email ,url));
        }        
        conn.close();
        return studentList;
    }
    
    // -- Return a list of Students in a given Unique course SEQ num --
    public ArrayList<String> getCourseStudentsID(String courseSEQ) throws SQLException
    {
        ArrayList<String> IDList = new ArrayList<String>();
        
        Connection conn = null;
        ResultSet rs = null;
        Statement st = null;

        conn = DriverManager.getConnection("jdbc:mysql://" + host
                                + "/" + database + "?"
                                + "user=" + user
                                + "&password=" + pass);
            
        st = conn.createStatement(rs.TYPE_SCROLL_SENSITIVE,rs.CONCUR_UPDATABLE);
                   
       
        String query = "Select student_id from student_courses where student_courses_seq = ('" + courseSEQ + "')";
        String studentID;
        rs = st.executeQuery(query);                  
       
        rs.beforeFirst();
        while(rs.next())
        {
            studentID = rs.getString("student_id");
            
            IDList.add(studentID);
        }        
        conn.close();
        
        return IDList;
    }
    
    // Check the status a of students scan time -- 
    public String checkStatus(String seq, String hour, String min) throws SQLException
    {
        // Determines if late, abenst, on time, etc...
        // 0 = absent
        // 1 = on time, present
        // 2 = Late by 10 minutes or less 
        // 3 = Very late
        
        // -- Get and Parse times of the course and ID Scan
        String startTimeHour = getStaffCoursesTaughtTimeHour(seq);
        String startTimeMin  = getStaffCoursesTaughtTimeMin(seq);
        
        int courseTime;
        courseTime = Integer.parseInt(startTimeHour) * 100;
        courseTime = Integer.parseInt(startTimeMin) + courseTime;
        
        int scanTime;
        scanTime = Integer.parseInt(hour) * 100;
        scanTime = Integer.parseInt(min) + scanTime;
                
        // -- If Before 10 mins of class start time --
        if (scanTime < courseTime + 10)
            return "On Time"; 
        
        // -- If After 10 mins but before 25 mins late        
        if (scanTime >= courseTime + 10 && scanTime < courseTime + 25)
            return "Late";
        
        // -- If more then 25 mins late --
        if (scanTime >= courseTime + 25)
            return "Very Late";
        
        // -- This should never be reached...--
        return "What Happened?? You broke the universe..";
    }
    
    //-- Returns a list of courses taught by a staff member as String[] --
    public String[] getStaffCoursesTaught(String username) throws SQLException 
    {

        System.out.println("Username being used to search for staff_id to find courses: " + username);
        String[]courses = new String[5];

        Connection conn = null;
        ResultSet rs = null;
        Statement st = null;

        conn = DriverManager.getConnection("jdbc:mysql://" + host
                                + "/" + database + "?"
                                + "user=" + user
                                + "&password=" + pass);
            
        st = conn.createStatement(rs.TYPE_SCROLL_SENSITIVE,rs.CONCUR_UPDATABLE);
                   
        String query = "SELECT staff_id FROM staff WHERE username = ('" + username + "')";
        String staffID;
        rs = st.executeQuery(query);                  
       
        rs.beforeFirst();
        rs.next();
        staffID = rs.getString("staff_id");
        
        System.out.println("Staff ID found to match the username: " + staffID);
        
        query = "SELECT course_code_ug FROM staff_courses WHERE staff_id = ('" + staffID + "')";
        rs = st.executeQuery(query);
        
        int count = 0;
        rs.beforeFirst();
        while (rs.next())
        {
            courses[count] = rs.getString("course_code_ug");
            System.out.println("Courses found that the given ID teaches: " + courses[count]);
            count++;
        }
        
        conn.close();
        return courses;
    }
    
    // -- Get the Unique SEQ num of each course a staff teaches --
    public String[] getStaffCoursesTaughtSEQ(String username) throws SQLException 
    {

        System.out.println("Username being used to search for staff_id to find courses: " + username);
        String[]courseSeq = new String[5];

        Connection conn = null;
        ResultSet rs = null;
        Statement st = null;

        conn = DriverManager.getConnection("jdbc:mysql://" + host
                                + "/" + database + "?"
                                + "user=" + user
                                + "&password=" + pass);
            
        st = conn.createStatement(rs.TYPE_SCROLL_SENSITIVE,rs.CONCUR_UPDATABLE);
                   
        String query = "SELECT staff_id FROM staff WHERE username = ('" + username + "')";
        String seqNum;
        rs = st.executeQuery(query);                  
       
        rs.beforeFirst();
        rs.next();
        seqNum = rs.getString("staff_id");
        
        System.out.println("Staff ID found to match the username: " + seqNum);
        
        query = "SELECT staff_seq FROM staff_courses WHERE staff_id = ('" + seqNum + "')";
        rs = st.executeQuery(query);
        
        int count = 0;
        rs.beforeFirst();
        while (rs.next())
        {
            courseSeq[count] = rs.getString("staff_seq");
            System.out.println("Courses seq found that the given ID teaches: " + courseSeq[count]);
            count++;
        }
        
        conn.close();
        return courseSeq;
    }
    
    //-- Get a courses start hour using its unique SEQ num to search --
    public String getStaffCoursesTaughtTimeHour(String seq) throws SQLException 
    {

        Connection conn = null;
        ResultSet rs = null;
        Statement st = null;

        conn = DriverManager.getConnection("jdbc:mysql://" + host
                                + "/" + database + "?"
                                + "user=" + user
                                + "&password=" + pass);
            
        st = conn.createStatement(rs.TYPE_SCROLL_SENSITIVE,rs.CONCUR_UPDATABLE);
                   
        String query = "SELECT MINUTE(start_time) FROM course_timings WHERE course_seq = ('" + seq + "')";
        String startTime;
        rs = st.executeQuery(query);                  
       
        rs.beforeFirst();
        rs.next();
        startTime = rs.getString("MINUTE(start_time)");
        


        conn.close();
        return startTime;
    }
        
    //-- Get a courses start min using its unique SEQ num to search --
    public String getStaffCoursesTaughtTimeMin(String seq) throws SQLException 
    {

        Connection conn = null;
        ResultSet rs = null;
        Statement st = null;

        conn = DriverManager.getConnection("jdbc:mysql://" + host
                                + "/" + database + "?"
                                + "user=" + user
                                + "&password=" + pass);
            
        st = conn.createStatement(rs.TYPE_SCROLL_SENSITIVE,rs.CONCUR_UPDATABLE);
                   
        String query = "SELECT SECOND(start_time) FROM course_timings WHERE course_seq = ('" + seq + "')";
        String startTime;
        rs = st.executeQuery(query);                  
       
        rs.beforeFirst();
        rs.next();
        startTime = rs.getString("SECOND(start_time)");
        


        conn.close();
        return startTime;
    }
    
    public ImageIcon getSplashImage()
    {
        ImageIcon icon = new ImageIcon(getClass().getResource("/studentPictures/" + username + ".jpg")); 
        return icon;
    }
}

